// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reports/v1beta/execution_reports.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BeaconDuty struct {
	Type      int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Committee uint64 `protobuf:"varint,2,opt,name=committee,proto3" json:"committee,omitempty"`
	Slot      uint64 `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (m *BeaconDuty) Reset()         { *m = BeaconDuty{} }
func (m *BeaconDuty) String() string { return proto.CompactTextString(m) }
func (*BeaconDuty) ProtoMessage()    {}
func (*BeaconDuty) Descriptor() ([]byte, []int) {
	return fileDescriptor_977976e9cbbe5fdd, []int{0}
}
func (m *BeaconDuty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeaconDuty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeaconDuty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeaconDuty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconDuty.Merge(m, src)
}
func (m *BeaconDuty) XXX_Size() int {
	return m.Size()
}
func (m *BeaconDuty) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconDuty.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconDuty proto.InternalMessageInfo

func (m *BeaconDuty) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *BeaconDuty) GetCommittee() uint64 {
	if m != nil {
		return m.Committee
	}
	return 0
}

func (m *BeaconDuty) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

// MsgExecutionReport is a single message encapsulating a single pool's (in a single epoch) duty execution.
type MsgExecutionReport struct {
	PoolId uint64        `protobuf:"varint,1,opt,name=PoolId,proto3" json:"PoolId,omitempty"`
	Epoch  uint64        `protobuf:"varint,2,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	Duties []*BeaconDuty `protobuf:"bytes,3,rep,name=Duties,proto3" json:"Duties,omitempty"`
}

func (m *MsgExecutionReport) Reset()         { *m = MsgExecutionReport{} }
func (m *MsgExecutionReport) String() string { return proto.CompactTextString(m) }
func (*MsgExecutionReport) ProtoMessage()    {}
func (*MsgExecutionReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_977976e9cbbe5fdd, []int{1}
}
func (m *MsgExecutionReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecutionReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecutionReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecutionReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecutionReport.Merge(m, src)
}
func (m *MsgExecutionReport) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecutionReport) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecutionReport.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecutionReport proto.InternalMessageInfo

func (m *MsgExecutionReport) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgExecutionReport) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *MsgExecutionReport) GetDuties() []*BeaconDuty {
	if m != nil {
		return m.Duties
	}
	return nil
}

func init() {
	proto.RegisterType((*BeaconDuty)(nil), "reports.v1beta1.BeaconDuty")
	proto.RegisterType((*MsgExecutionReport)(nil), "reports.v1beta1.MsgExecutionReport")
}

func init() {
	proto.RegisterFile("reports/v1beta/execution_reports.proto", fileDescriptor_977976e9cbbe5fdd)
}

var fileDescriptor_977976e9cbbe5fdd = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x50, 0xc1, 0x4a, 0xf3, 0x40,
	0x18, 0xcc, 0xfe, 0x49, 0x03, 0xff, 0x7a, 0x10, 0x16, 0x91, 0x80, 0xb2, 0x84, 0x1e, 0x24, 0x17,
	0xb3, 0xd6, 0xbe, 0x41, 0x69, 0x0f, 0x0a, 0x82, 0xec, 0xd1, 0x8b, 0x24, 0x71, 0x69, 0x83, 0x49,
	0xbe, 0x25, 0xfb, 0xc5, 0xa6, 0x6f, 0xe1, 0x63, 0x79, 0xec, 0xd1, 0xa3, 0x24, 0x2f, 0x22, 0xdd,
	0x26, 0x14, 0xbc, 0xcd, 0xec, 0xcc, 0xce, 0xce, 0x0e, 0xbd, 0xa9, 0x95, 0x86, 0x1a, 0x8d, 0xf8,
	0x98, 0xa5, 0x0a, 0x13, 0xa1, 0x5a, 0x95, 0x35, 0x98, 0x43, 0xf5, 0x3a, 0x08, 0xb1, 0xae, 0x01,
	0x81, 0x9d, 0x8f, 0xf4, 0xe8, 0x9b, 0x4d, 0x25, 0xa5, 0x0b, 0x95, 0x64, 0x50, 0x2d, 0x1b, 0xdc,
	0x31, 0x46, 0x3d, 0xdc, 0x69, 0x15, 0x90, 0x90, 0x44, 0x13, 0x69, 0x31, 0xbb, 0xa6, 0xff, 0x33,
	0x28, 0xcb, 0x1c, 0x51, 0xa9, 0xe0, 0x5f, 0x48, 0x22, 0x4f, 0x9e, 0x0e, 0x0e, 0x37, 0x4c, 0x01,
	0x18, 0xb8, 0x56, 0xb0, 0x78, 0xba, 0xa5, 0xec, 0xc9, 0xac, 0x57, 0x63, 0x05, 0x69, 0x9f, 0x64,
	0x97, 0xd4, 0x7f, 0x06, 0x28, 0x1e, 0xde, 0x6c, 0xba, 0x27, 0x07, 0xc6, 0x2e, 0xe8, 0x64, 0xa5,
	0x21, 0xdb, 0x0c, 0xd9, 0x47, 0xc2, 0xe6, 0xd4, 0x5f, 0x36, 0x98, 0x2b, 0x13, 0xb8, 0xa1, 0x1b,
	0x9d, 0xdd, 0x5f, 0xc5, 0x7f, 0x9a, 0xc7, 0xa7, 0xda, 0x72, 0xb0, 0x2e, 0x1e, 0xbf, 0x3a, 0x4e,
	0xf6, 0x1d, 0x27, 0x3f, 0x1d, 0x27, 0x9f, 0x3d, 0x77, 0xf6, 0x3d, 0x77, 0xbe, 0x7b, 0xee, 0xbc,
	0xdc, 0xad, 0x73, 0xdc, 0x34, 0x69, 0x9c, 0x41, 0x29, 0xd2, 0x02, 0xda, 0x44, 0x6b, 0xa1, 0x01,
	0x0a, 0x73, 0x5b, 0x29, 0xdc, 0x42, 0xfd, 0x2e, 0x5a, 0x31, 0x4e, 0x78, 0xf8, 0xb5, 0x49, 0x7d,
	0x3b, 0xd8, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xff, 0x44, 0x1e, 0x5a, 0x01, 0x00, 0x00,
}

func (m *BeaconDuty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeaconDuty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeaconDuty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		i = encodeVarintExecutionReports(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x18
	}
	if m.Committee != 0 {
		i = encodeVarintExecutionReports(dAtA, i, uint64(m.Committee))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintExecutionReports(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecutionReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecutionReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecutionReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Duties) > 0 {
		for iNdEx := len(m.Duties) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Duties[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutionReports(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Epoch != 0 {
		i = encodeVarintExecutionReports(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintExecutionReports(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintExecutionReports(dAtA []byte, offset int, v uint64) int {
	offset -= sovExecutionReports(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BeaconDuty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovExecutionReports(uint64(m.Type))
	}
	if m.Committee != 0 {
		n += 1 + sovExecutionReports(uint64(m.Committee))
	}
	if m.Slot != 0 {
		n += 1 + sovExecutionReports(uint64(m.Slot))
	}
	return n
}

func (m *MsgExecutionReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovExecutionReports(uint64(m.PoolId))
	}
	if m.Epoch != 0 {
		n += 1 + sovExecutionReports(uint64(m.Epoch))
	}
	if len(m.Duties) > 0 {
		for _, e := range m.Duties {
			l = e.Size()
			n += 1 + l + sovExecutionReports(uint64(l))
		}
	}
	return n
}

func sovExecutionReports(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExecutionReports(x uint64) (n int) {
	return sovExecutionReports(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BeaconDuty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutionReports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconDuty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconDuty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutionReports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Committee", wireType)
			}
			m.Committee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutionReports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Committee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutionReports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExecutionReports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutionReports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExecutionReports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecutionReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutionReports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecutionReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecutionReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutionReports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutionReports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutionReports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutionReports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutionReports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duties = append(m.Duties, &BeaconDuty{})
			if err := m.Duties[len(m.Duties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutionReports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutionReports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExecutionReports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExecutionReports(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExecutionReports
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecutionReports
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecutionReports
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExecutionReports
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExecutionReports
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExecutionReports
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExecutionReports        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExecutionReports          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExecutionReports = fmt.Errorf("proto: unexpected end of group")
)
