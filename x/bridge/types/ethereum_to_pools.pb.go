// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bridge/v1beta/ethereum_to_pools.proto

package types

import (
	fmt "fmt"
	github_com_bloxapp_pools_network_shared_types "github.com/bloxapp/pools-network/shared/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClaimType int32

const (
	ClaimType_Delegate       ClaimType = 0
	ClaimType_Undelegate     ClaimType = 1
	ClaimType_CreatePool     ClaimType = 2
	ClaimType_CreateOperator ClaimType = 3
)

var ClaimType_name = map[int32]string{
	0: "Delegate",
	1: "Undelegate",
	2: "CreatePool",
	3: "CreateOperator",
}

var ClaimType_value = map[string]int32{
	"Delegate":       0,
	"Undelegate":     1,
	"CreatePool":     2,
	"CreateOperator": 3,
}

func (x ClaimType) String() string {
	return proto.EnumName(ClaimType_name, int32(x))
}

func (ClaimType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1fc670358116c6e3, []int{0}
}

// ClaimData has a bunch of fields for different claims to use, all of them (except tx_hash and claim type) are optional
type ClaimData struct {
	TxHash             []byte                                                           `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	ClaimType          ClaimType                                                        `protobuf:"varint,2,opt,name=claimType,proto3,enum=bridge.v1beta1.ClaimType" json:"claimType,omitempty"`
	EthereumAddresses  []github_com_bloxapp_pools_network_shared_types.EthereumAddress  `protobuf:"bytes,3,rep,name=ethereum_addresses,json=ethereumAddresses,proto3,customtype=github.com/bloxapp/pools-network/shared/types.EthereumAddress" json:"ethereum_addresses,omitempty"`
	ConsensusAddresses []github_com_bloxapp_pools_network_shared_types.ConsensusAddress `protobuf:"bytes,4,rep,name=consensus_addresses,json=consensusAddresses,proto3,customtype=github.com/bloxapp/pools-network/shared/types.ConsensusAddress" json:"consensus_addresses,omitempty"`
	Values             []uint64                                                         `protobuf:"varint,5,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (m *ClaimData) Reset()         { *m = ClaimData{} }
func (m *ClaimData) String() string { return proto.CompactTextString(m) }
func (*ClaimData) ProtoMessage()    {}
func (*ClaimData) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc670358116c6e3, []int{0}
}
func (m *ClaimData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimData.Merge(m, src)
}
func (m *ClaimData) XXX_Size() int {
	return m.Size()
}
func (m *ClaimData) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimData.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimData proto.InternalMessageInfo

func (m *ClaimData) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *ClaimData) GetClaimType() ClaimType {
	if m != nil {
		return m.ClaimType
	}
	return ClaimType_Delegate
}

func (m *ClaimData) GetValues() []uint64 {
	if m != nil {
		return m.Values
	}
	return nil
}

// MsgEthereumClaim is a container for events that happened on the ethereum blockchain.
// It's essentially an ethereum -> pools oracle
// The nonce is a monotonic id of the claim msg, it has to be sequential
// Due to eth1 probabilistic finality, each validator on the pools network will need to attest to all claims to make them be included in the state (2/3 vote).
type MsgEthereumClaim struct {
	Nonce            uint64                                                         `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	EthereumChainId  uint64                                                         `protobuf:"varint,2,opt,name=ethereum_chain_id,json=ethereumChainId,proto3" json:"ethereum_chain_id,omitempty"`
	ContractAddress  github_com_bloxapp_pools_network_shared_types.EthereumAddress  `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3,customtype=github.com/bloxapp/pools-network/shared/types.EthereumAddress" json:"contract_address"`
	ConsensusAddress github_com_bloxapp_pools_network_shared_types.ConsensusAddress `protobuf:"bytes,4,opt,name=consensus_address,json=consensusAddress,proto3,customtype=github.com/bloxapp/pools-network/shared/types.ConsensusAddress" json:"consensus_address"`
	Data             []*ClaimData                                                   `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgEthereumClaim) Reset()         { *m = MsgEthereumClaim{} }
func (m *MsgEthereumClaim) String() string { return proto.CompactTextString(m) }
func (*MsgEthereumClaim) ProtoMessage()    {}
func (*MsgEthereumClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc670358116c6e3, []int{1}
}
func (m *MsgEthereumClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEthereumClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEthereumClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEthereumClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEthereumClaim.Merge(m, src)
}
func (m *MsgEthereumClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgEthereumClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEthereumClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEthereumClaim proto.InternalMessageInfo

func (m *MsgEthereumClaim) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgEthereumClaim) GetEthereumChainId() uint64 {
	if m != nil {
		return m.EthereumChainId
	}
	return 0
}

func (m *MsgEthereumClaim) GetData() []*ClaimData {
	if m != nil {
		return m.Data
	}
	return nil
}

// ClaimAttestation is a container for counting claim attestations
type ClaimAttestation struct {
	ClaimId          []byte                                                           `protobuf:"bytes,1,opt,name=claim_id,json=claimId,proto3" json:"claim_id,omitempty"`
	Votes            []github_com_bloxapp_pools_network_shared_types.ConsensusAddress `protobuf:"bytes,2,rep,name=votes,proto3,customtype=github.com/bloxapp/pools-network/shared/types.ConsensusAddress" json:"votes"`
	AccumulatedPower uint64                                                           `protobuf:"varint,3,opt,name=accumulated_power,json=accumulatedPower,proto3" json:"accumulated_power,omitempty"`
	Finalized        bool                                                             `protobuf:"varint,4,opt,name=finalized,proto3" json:"finalized,omitempty"`
}

func (m *ClaimAttestation) Reset()         { *m = ClaimAttestation{} }
func (m *ClaimAttestation) String() string { return proto.CompactTextString(m) }
func (*ClaimAttestation) ProtoMessage()    {}
func (*ClaimAttestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc670358116c6e3, []int{2}
}
func (m *ClaimAttestation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimAttestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimAttestation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimAttestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimAttestation.Merge(m, src)
}
func (m *ClaimAttestation) XXX_Size() int {
	return m.Size()
}
func (m *ClaimAttestation) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimAttestation.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimAttestation proto.InternalMessageInfo

func (m *ClaimAttestation) GetClaimId() []byte {
	if m != nil {
		return m.ClaimId
	}
	return nil
}

func (m *ClaimAttestation) GetAccumulatedPower() uint64 {
	if m != nil {
		return m.AccumulatedPower
	}
	return 0
}

func (m *ClaimAttestation) GetFinalized() bool {
	if m != nil {
		return m.Finalized
	}
	return false
}

type EthereumBridgeContact struct {
	ContractAddress github_com_bloxapp_pools_network_shared_types.EthereumAddress `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3,customtype=github.com/bloxapp/pools-network/shared/types.EthereumAddress" json:"contract_address"`
	ChainId         uint64                                                        `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *EthereumBridgeContact) Reset()         { *m = EthereumBridgeContact{} }
func (m *EthereumBridgeContact) String() string { return proto.CompactTextString(m) }
func (*EthereumBridgeContact) ProtoMessage()    {}
func (*EthereumBridgeContact) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc670358116c6e3, []int{3}
}
func (m *EthereumBridgeContact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EthereumBridgeContact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EthereumBridgeContact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EthereumBridgeContact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthereumBridgeContact.Merge(m, src)
}
func (m *EthereumBridgeContact) XXX_Size() int {
	return m.Size()
}
func (m *EthereumBridgeContact) XXX_DiscardUnknown() {
	xxx_messageInfo_EthereumBridgeContact.DiscardUnknown(m)
}

var xxx_messageInfo_EthereumBridgeContact proto.InternalMessageInfo

func (m *EthereumBridgeContact) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func init() {
	proto.RegisterEnum("bridge.v1beta1.ClaimType", ClaimType_name, ClaimType_value)
	proto.RegisterType((*ClaimData)(nil), "bridge.v1beta1.ClaimData")
	proto.RegisterType((*MsgEthereumClaim)(nil), "bridge.v1beta1.MsgEthereumClaim")
	proto.RegisterType((*ClaimAttestation)(nil), "bridge.v1beta1.ClaimAttestation")
	proto.RegisterType((*EthereumBridgeContact)(nil), "bridge.v1beta1.EthereumBridgeContact")
}

func init() {
	proto.RegisterFile("bridge/v1beta/ethereum_to_pools.proto", fileDescriptor_1fc670358116c6e3)
}

var fileDescriptor_1fc670358116c6e3 = []byte{
	// 610 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x5f, 0x6b, 0xd4, 0x4e,
	0x14, 0xdd, 0xec, 0xa6, 0xff, 0xe6, 0x57, 0xb6, 0xe9, 0xfc, 0xaa, 0xa6, 0x22, 0xe9, 0xb2, 0x20,
	0x2c, 0x95, 0x26, 0x54, 0x1f, 0x7c, 0x52, 0xe8, 0xa6, 0x15, 0xfb, 0x50, 0x2c, 0x41, 0x5f, 0x44,
	0x08, 0xb3, 0x93, 0x6b, 0x12, 0xcc, 0x66, 0x42, 0xe6, 0xa6, 0xdd, 0xfa, 0x29, 0xfc, 0x10, 0x7e,
	0x98, 0x3e, 0xf6, 0x49, 0xa4, 0x48, 0x91, 0xf6, 0xcd, 0x4f, 0x21, 0x99, 0x24, 0xfd, 0xa7, 0x22,
	0x52, 0x7d, 0xcb, 0x3d, 0x73, 0xb8, 0x67, 0xee, 0x99, 0x93, 0x4b, 0xee, 0x8f, 0xf2, 0x38, 0x08,
	0xc1, 0xd9, 0x5b, 0x1f, 0x01, 0x32, 0x07, 0x30, 0x82, 0x1c, 0x8a, 0xb1, 0x8f, 0xc2, 0xcf, 0x84,
	0x48, 0xa4, 0x9d, 0xe5, 0x02, 0x05, 0xed, 0x56, 0x34, 0xbb, 0xa2, 0xad, 0xdf, 0x5d, 0x0a, 0x45,
	0x28, 0xd4, 0x91, 0x53, 0x7e, 0x55, 0xac, 0xfe, 0x97, 0x36, 0x99, 0x73, 0x13, 0x16, 0x8f, 0x37,
	0x19, 0x32, 0x7a, 0x87, 0xcc, 0xe0, 0xc4, 0x8f, 0x98, 0x8c, 0x4c, 0xad, 0xa7, 0x0d, 0xe6, 0xbd,
	0x69, 0x9c, 0x3c, 0x67, 0x32, 0xa2, 0x8f, 0xc9, 0x1c, 0x2f, 0x59, 0x2f, 0x0f, 0x32, 0x30, 0xdb,
	0x3d, 0x6d, 0xd0, 0x7d, 0xb8, 0x6c, 0x5f, 0x15, 0xb0, 0xdd, 0x86, 0xe0, 0x5d, 0x70, 0x69, 0x46,
	0xe8, 0xf9, 0x05, 0x59, 0x10, 0xe4, 0x20, 0x25, 0x48, 0xb3, 0xd3, 0xeb, 0x0c, 0xe6, 0x87, 0x1b,
	0xc7, 0x27, 0x2b, 0x4f, 0xc2, 0x18, 0xa3, 0x62, 0x64, 0x73, 0x31, 0x76, 0x46, 0x89, 0x98, 0xb0,
	0x2c, 0x73, 0xd4, 0x14, 0x6b, 0x29, 0xe0, 0xbe, 0xc8, 0xdf, 0x39, 0x32, 0x62, 0x39, 0x04, 0x0e,
	0x1e, 0x64, 0x20, 0xed, 0xad, 0xba, 0xd7, 0x46, 0xd5, 0xca, 0x5b, 0x84, 0xab, 0x00, 0x48, 0x2a,
	0xc9, 0xff, 0x5c, 0xa4, 0x12, 0x52, 0x59, 0xc8, 0x4b, 0x92, 0xba, 0x92, 0x1c, 0x1e, 0x9f, 0xac,
	0x3c, 0xfd, 0x33, 0x49, 0xb7, 0x69, 0xd6, 0x68, 0x52, 0x7e, 0x0d, 0x01, 0x49, 0x6f, 0x93, 0xe9,
	0x3d, 0x96, 0x14, 0x20, 0xcd, 0xa9, 0x5e, 0x67, 0xa0, 0x7b, 0x75, 0xd5, 0xff, 0xd6, 0x26, 0xc6,
	0x8e, 0x0c, 0x9b, 0x6b, 0x2b, 0x8b, 0xe8, 0x12, 0x99, 0x4a, 0x45, 0xca, 0x41, 0x79, 0xac, 0x7b,
	0x55, 0x41, 0x57, 0xc9, 0xf9, 0x30, 0x3e, 0x8f, 0x58, 0x9c, 0xfa, 0x71, 0xa0, 0xac, 0xd6, 0xbd,
	0x85, 0xe6, 0xc0, 0x2d, 0xf1, 0xed, 0x80, 0x66, 0xc4, 0xe0, 0x22, 0xc5, 0x9c, 0x71, 0x6c, 0x46,
	0x34, 0x3b, 0xe5, 0x83, 0x0d, 0xb7, 0x0e, 0x4f, 0x56, 0x5a, 0x37, 0xf7, 0x75, 0xa1, 0x69, 0x5f,
	0x03, 0x54, 0x92, 0xc5, 0x1f, 0x5c, 0x35, 0x75, 0x25, 0xf9, 0xac, 0x96, 0xbc, 0xa9, 0xaf, 0xc6,
	0x75, 0x5f, 0xe9, 0x1a, 0xd1, 0x03, 0x86, 0x4c, 0x79, 0xfa, 0xdf, 0x2f, 0x02, 0x57, 0xe6, 0xd6,
	0x53, 0xb4, 0xfe, 0x27, 0x8d, 0x18, 0x0a, 0xdb, 0x40, 0x04, 0x89, 0x0c, 0x63, 0x91, 0xd2, 0x65,
	0x32, 0xab, 0xd2, 0x58, 0xba, 0x59, 0x65, 0x7a, 0x46, 0xd5, 0xdb, 0x01, 0x7d, 0x43, 0xa6, 0xf6,
	0x04, 0x82, 0x34, 0xdb, 0x2a, 0x1b, 0x7f, 0x6b, 0x8e, 0xaa, 0x29, 0x7d, 0x40, 0x16, 0x19, 0xe7,
	0xc5, 0xb8, 0x48, 0x18, 0x42, 0xe0, 0x67, 0x62, 0x1f, 0x72, 0xf5, 0x48, 0xba, 0x67, 0x5c, 0x3a,
	0xd8, 0x2d, 0x71, 0x7a, 0x8f, 0xcc, 0xbd, 0x8d, 0x53, 0x96, 0xc4, 0xef, 0x21, 0x50, 0xb6, 0xce,
	0x7a, 0x17, 0x40, 0xff, 0xa3, 0x46, 0x6e, 0x35, 0x2f, 0x34, 0x54, 0x1e, 0xb8, 0x22, 0x45, 0xc6,
	0xf1, 0xa7, 0x41, 0xd0, 0xfe, 0x69, 0x10, 0x4a, 0x3f, 0xaf, 0xa6, 0x73, 0x86, 0x57, 0xa9, 0x5c,
	0xdd, 0xa9, 0x57, 0x89, 0xfa, 0xf1, 0xe7, 0xc9, 0xec, 0x26, 0x24, 0x10, 0x32, 0x04, 0xa3, 0x45,
	0xbb, 0x84, 0xbc, 0x4a, 0x83, 0xa6, 0xd6, 0xca, 0xda, 0xcd, 0x81, 0x21, 0xec, 0x0a, 0x91, 0x18,
	0x6d, 0x4a, 0x49, 0xb7, 0xaa, 0x5f, 0x64, 0x90, 0x33, 0x14, 0xb9, 0xd1, 0x19, 0x6e, 0x1f, 0x9e,
	0x5a, 0xda, 0xd1, 0xa9, 0xa5, 0x7d, 0x3d, 0xb5, 0xb4, 0x0f, 0x67, 0x56, 0xeb, 0xe8, 0xcc, 0x6a,
	0x7d, 0x3e, 0xb3, 0x5a, 0xaf, 0x9d, 0xdf, 0xce, 0x34, 0x71, 0xea, 0x25, 0xa9, 0xa6, 0x1a, 0x4d,
	0xab, 0x65, 0xf7, 0xe8, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x0a, 0x87, 0x3d, 0x3b, 0x05,
	0x00, 0x00,
}

func (m *ClaimData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		dAtA2 := make([]byte, len(m.Values)*10)
		var j1 int
		for _, num := range m.Values {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintEthereumToPools(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ConsensusAddresses) > 0 {
		for iNdEx := len(m.ConsensusAddresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.ConsensusAddresses[iNdEx].Size()
				i -= size
				if _, err := m.ConsensusAddresses[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.EthereumAddresses) > 0 {
		for iNdEx := len(m.EthereumAddresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.EthereumAddresses[iNdEx].Size()
				i -= size
				if _, err := m.EthereumAddresses[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ClaimType != 0 {
		i = encodeVarintEthereumToPools(dAtA, i, uint64(m.ClaimType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintEthereumToPools(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEthereumClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEthereumClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEthereumClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.ConsensusAddress.Size()
		i -= size
		if _, err := m.ConsensusAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ContractAddress.Size()
		i -= size
		if _, err := m.ContractAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.EthereumChainId != 0 {
		i = encodeVarintEthereumToPools(dAtA, i, uint64(m.EthereumChainId))
		i--
		dAtA[i] = 0x10
	}
	if m.Nonce != 0 {
		i = encodeVarintEthereumToPools(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClaimAttestation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimAttestation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimAttestation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Finalized {
		i--
		if m.Finalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.AccumulatedPower != 0 {
		i = encodeVarintEthereumToPools(dAtA, i, uint64(m.AccumulatedPower))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Votes) > 0 {
		for iNdEx := len(m.Votes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Votes[iNdEx].Size()
				i -= size
				if _, err := m.Votes[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ClaimId) > 0 {
		i -= len(m.ClaimId)
		copy(dAtA[i:], m.ClaimId)
		i = encodeVarintEthereumToPools(dAtA, i, uint64(len(m.ClaimId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EthereumBridgeContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthereumBridgeContact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EthereumBridgeContact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintEthereumToPools(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.ContractAddress.Size()
		i -= size
		if _, err := m.ContractAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintEthereumToPools(dAtA []byte, offset int, v uint64) int {
	offset -= sovEthereumToPools(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClaimData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovEthereumToPools(uint64(l))
	}
	if m.ClaimType != 0 {
		n += 1 + sovEthereumToPools(uint64(m.ClaimType))
	}
	if len(m.EthereumAddresses) > 0 {
		for _, e := range m.EthereumAddresses {
			l = e.Size()
			n += 1 + l + sovEthereumToPools(uint64(l))
		}
	}
	if len(m.ConsensusAddresses) > 0 {
		for _, e := range m.ConsensusAddresses {
			l = e.Size()
			n += 1 + l + sovEthereumToPools(uint64(l))
		}
	}
	if len(m.Values) > 0 {
		l = 0
		for _, e := range m.Values {
			l += sovEthereumToPools(uint64(e))
		}
		n += 1 + sovEthereumToPools(uint64(l)) + l
	}
	return n
}

func (m *MsgEthereumClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovEthereumToPools(uint64(m.Nonce))
	}
	if m.EthereumChainId != 0 {
		n += 1 + sovEthereumToPools(uint64(m.EthereumChainId))
	}
	l = m.ContractAddress.Size()
	n += 1 + l + sovEthereumToPools(uint64(l))
	l = m.ConsensusAddress.Size()
	n += 1 + l + sovEthereumToPools(uint64(l))
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovEthereumToPools(uint64(l))
		}
	}
	return n
}

func (m *ClaimAttestation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClaimId)
	if l > 0 {
		n += 1 + l + sovEthereumToPools(uint64(l))
	}
	if len(m.Votes) > 0 {
		for _, e := range m.Votes {
			l = e.Size()
			n += 1 + l + sovEthereumToPools(uint64(l))
		}
	}
	if m.AccumulatedPower != 0 {
		n += 1 + sovEthereumToPools(uint64(m.AccumulatedPower))
	}
	if m.Finalized {
		n += 2
	}
	return n
}

func (m *EthereumBridgeContact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ContractAddress.Size()
	n += 1 + l + sovEthereumToPools(uint64(l))
	if m.ChainId != 0 {
		n += 1 + sovEthereumToPools(uint64(m.ChainId))
	}
	return n
}

func sovEthereumToPools(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEthereumToPools(x uint64) (n int) {
	return sovEthereumToPools(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClaimData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereumToPools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimType", wireType)
			}
			m.ClaimType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimType |= ClaimType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumAddresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_bloxapp_pools_network_shared_types.EthereumAddress
			m.EthereumAddresses = append(m.EthereumAddresses, v)
			if err := m.EthereumAddresses[len(m.EthereumAddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusAddresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_bloxapp_pools_network_shared_types.ConsensusAddress
			m.ConsensusAddresses = append(m.ConsensusAddresses, v)
			if err := m.ConsensusAddresses[len(m.ConsensusAddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEthereumToPools
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Values = append(m.Values, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEthereumToPools
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEthereumToPools
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEthereumToPools
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Values) == 0 {
					m.Values = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEthereumToPools
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Values = append(m.Values, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEthereumToPools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEthereumClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereumToPools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEthereumClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEthereumClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumChainId", wireType)
			}
			m.EthereumChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthereumChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ContractAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConsensusAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ClaimData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthereumToPools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimAttestation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereumToPools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimAttestation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimAttestation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimId = append(m.ClaimId[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimId == nil {
				m.ClaimId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_bloxapp_pools_network_shared_types.ConsensusAddress
			m.Votes = append(m.Votes, v)
			if err := m.Votes[len(m.Votes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedPower", wireType)
			}
			m.AccumulatedPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccumulatedPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Finalized = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEthereumToPools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EthereumBridgeContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereumToPools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthereumBridgeContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthereumBridgeContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ContractAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEthereumToPools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEthereumToPools(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEthereumToPools
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEthereumToPools
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEthereumToPools
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEthereumToPools
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEthereumToPools        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEthereumToPools          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEthereumToPools = fmt.Errorf("proto: unexpected end of group")
)
