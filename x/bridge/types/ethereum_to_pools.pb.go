// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bridge/v1beta/ethereum_to_pools.proto

package types

import (
	fmt "fmt"
	github_com_bloxapp_pools_network_shared_types "github.com/bloxapp/pools-network/shared/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DelegateVote struct {
	Nonce     uint64                                                         `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Delegator *github_com_bloxapp_pools_network_shared_types.EthereumAddress `protobuf:"bytes,2,opt,name=delegator,proto3,customtype=github.com/bloxapp/pools-network/shared/types.EthereumAddress" json:"delegator,omitempty"`
	To        *github_com_bloxapp_pools_network_shared_types.EthereumAddress `protobuf:"bytes,3,opt,name=to,proto3,customtype=github.com/bloxapp/pools-network/shared/types.EthereumAddress" json:"to,omitempty"`
	Power     uint64                                                         `protobuf:"varint,4,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *DelegateVote) Reset()         { *m = DelegateVote{} }
func (m *DelegateVote) String() string { return proto.CompactTextString(m) }
func (*DelegateVote) ProtoMessage()    {}
func (*DelegateVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc670358116c6e3, []int{0}
}
func (m *DelegateVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegateVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegateVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegateVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegateVote.Merge(m, src)
}
func (m *DelegateVote) XXX_Size() int {
	return m.Size()
}
func (m *DelegateVote) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegateVote.DiscardUnknown(m)
}

var xxx_messageInfo_DelegateVote proto.InternalMessageInfo

func (m *DelegateVote) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *DelegateVote) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

type UnDelegateVote struct {
	Nonce     uint64                                                         `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	From      *github_com_bloxapp_pools_network_shared_types.EthereumAddress `protobuf:"bytes,2,opt,name=from,proto3,customtype=github.com/bloxapp/pools-network/shared/types.EthereumAddress" json:"from,omitempty"`
	Delegator *github_com_bloxapp_pools_network_shared_types.EthereumAddress `protobuf:"bytes,3,opt,name=delegator,proto3,customtype=github.com/bloxapp/pools-network/shared/types.EthereumAddress" json:"delegator,omitempty"`
}

func (m *UnDelegateVote) Reset()         { *m = UnDelegateVote{} }
func (m *UnDelegateVote) String() string { return proto.CompactTextString(m) }
func (*UnDelegateVote) ProtoMessage()    {}
func (*UnDelegateVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc670358116c6e3, []int{1}
}
func (m *UnDelegateVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnDelegateVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnDelegateVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnDelegateVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnDelegateVote.Merge(m, src)
}
func (m *UnDelegateVote) XXX_Size() int {
	return m.Size()
}
func (m *UnDelegateVote) XXX_DiscardUnknown() {
	xxx_messageInfo_UnDelegateVote.DiscardUnknown(m)
}

var xxx_messageInfo_UnDelegateVote proto.InternalMessageInfo

func (m *UnDelegateVote) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type CreatePool struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *CreatePool) Reset()         { *m = CreatePool{} }
func (m *CreatePool) String() string { return proto.CompactTextString(m) }
func (*CreatePool) ProtoMessage()    {}
func (*CreatePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc670358116c6e3, []int{2}
}
func (m *CreatePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePool.Merge(m, src)
}
func (m *CreatePool) XXX_Size() int {
	return m.Size()
}
func (m *CreatePool) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePool.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePool proto.InternalMessageInfo

func (m *CreatePool) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type CreateOperator struct {
	Nonce           uint64                                                          `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	EthereumAddress *github_com_bloxapp_pools_network_shared_types.EthereumAddress  `protobuf:"bytes,2,opt,name=ethereum_address,json=ethereumAddress,proto3,customtype=github.com/bloxapp/pools-network/shared/types.EthereumAddress" json:"ethereum_address,omitempty"`
	ConsensusPubkey *github_com_bloxapp_pools_network_shared_types.ConsensusAddress `protobuf:"bytes,3,opt,name=consensus_pubkey,json=consensusPubkey,proto3,customtype=github.com/bloxapp/pools-network/shared/types.ConsensusAddress" json:"consensus_pubkey,omitempty"`
	EthStake        uint64                                                          `protobuf:"varint,4,opt,name=eth_stake,json=ethStake,proto3" json:"eth_stake,omitempty"`
}

func (m *CreateOperator) Reset()         { *m = CreateOperator{} }
func (m *CreateOperator) String() string { return proto.CompactTextString(m) }
func (*CreateOperator) ProtoMessage()    {}
func (*CreateOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc670358116c6e3, []int{3}
}
func (m *CreateOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOperator.Merge(m, src)
}
func (m *CreateOperator) XXX_Size() int {
	return m.Size()
}
func (m *CreateOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOperator.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOperator proto.InternalMessageInfo

func (m *CreateOperator) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *CreateOperator) GetEthStake() uint64 {
	if m != nil {
		return m.EthStake
	}
	return 0
}

// MsgEthereumClaim is a container for events that happened on the ethereum blockchain.
// It's essentially an ethereum -> pools oracle
// each event has nonce, a monotonic id of the claim
// Due to eth1 probabilistic finality, each validator on the pools network will need to attest to all claims to make them be included in the state (2/3 vote).
type MsgEthereumClaim struct {
	EthereumChainId uint64                                                          `protobuf:"varint,1,opt,name=ethereum_chain_id,json=ethereumChainId,proto3" json:"ethereum_chain_id,omitempty"`
	ContractAddress *github_com_bloxapp_pools_network_shared_types.EthereumAddress  `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3,customtype=github.com/bloxapp/pools-network/shared/types.EthereumAddress" json:"contract_address,omitempty"`
	ConsensusPubkey *github_com_bloxapp_pools_network_shared_types.ConsensusAddress `protobuf:"bytes,3,opt,name=consensus_pubkey,json=consensusPubkey,proto3,customtype=github.com/bloxapp/pools-network/shared/types.ConsensusAddress" json:"consensus_pubkey,omitempty"`
	Delegates       []*DelegateVote                                                 `protobuf:"bytes,4,rep,name=delegates,proto3" json:"delegates,omitempty"`
	Undelegates     []*UnDelegateVote                                               `protobuf:"bytes,5,rep,name=undelegates,proto3" json:"undelegates,omitempty"`
	CreatePools     []*CreatePool                                                   `protobuf:"bytes,6,rep,name=create_pools,json=createPools,proto3" json:"create_pools,omitempty"`
	CreateOperators []*CreateOperator                                               `protobuf:"bytes,7,rep,name=create_operators,json=createOperators,proto3" json:"create_operators,omitempty"`
}

func (m *MsgEthereumClaim) Reset()         { *m = MsgEthereumClaim{} }
func (m *MsgEthereumClaim) String() string { return proto.CompactTextString(m) }
func (*MsgEthereumClaim) ProtoMessage()    {}
func (*MsgEthereumClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc670358116c6e3, []int{4}
}
func (m *MsgEthereumClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEthereumClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEthereumClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEthereumClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEthereumClaim.Merge(m, src)
}
func (m *MsgEthereumClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgEthereumClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEthereumClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEthereumClaim proto.InternalMessageInfo

func (m *MsgEthereumClaim) GetEthereumChainId() uint64 {
	if m != nil {
		return m.EthereumChainId
	}
	return 0
}

func (m *MsgEthereumClaim) GetDelegates() []*DelegateVote {
	if m != nil {
		return m.Delegates
	}
	return nil
}

func (m *MsgEthereumClaim) GetUndelegates() []*UnDelegateVote {
	if m != nil {
		return m.Undelegates
	}
	return nil
}

func (m *MsgEthereumClaim) GetCreatePools() []*CreatePool {
	if m != nil {
		return m.CreatePools
	}
	return nil
}

func (m *MsgEthereumClaim) GetCreateOperators() []*CreateOperator {
	if m != nil {
		return m.CreateOperators
	}
	return nil
}

func init() {
	proto.RegisterType((*DelegateVote)(nil), "bridge.v1beta1.DelegateVote")
	proto.RegisterType((*UnDelegateVote)(nil), "bridge.v1beta1.UnDelegateVote")
	proto.RegisterType((*CreatePool)(nil), "bridge.v1beta1.CreatePool")
	proto.RegisterType((*CreateOperator)(nil), "bridge.v1beta1.CreateOperator")
	proto.RegisterType((*MsgEthereumClaim)(nil), "bridge.v1beta1.MsgEthereumClaim")
}

func init() {
	proto.RegisterFile("bridge/v1beta/ethereum_to_pools.proto", fileDescriptor_1fc670358116c6e3)
}

var fileDescriptor_1fc670358116c6e3 = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xeb, 0x24, 0x2d, 0x74, 0x13, 0xa5, 0x61, 0xd5, 0x83, 0x55, 0x90, 0x1b, 0x59, 0x42,
	0x8a, 0x90, 0xb0, 0x55, 0xb8, 0x21, 0x15, 0xd1, 0x04, 0x0e, 0x39, 0x20, 0x8a, 0x51, 0x39, 0x70,
	0xb1, 0xd6, 0xf6, 0x60, 0x47, 0x71, 0x3c, 0xd6, 0xee, 0x86, 0xb6, 0x6f, 0xc1, 0x23, 0x20, 0xf1,
	0x32, 0x1c, 0x7b, 0x44, 0x3d, 0x44, 0x28, 0xb9, 0xf3, 0x0c, 0xc8, 0x6b, 0xc7, 0xa9, 0xab, 0x48,
	0x80, 0x14, 0xc4, 0x6d, 0x67, 0x3d, 0xf3, 0xef, 0xcc, 0xe7, 0x99, 0x21, 0x0f, 0x3d, 0x3e, 0x0a,
	0x42, 0xb0, 0x3f, 0x1d, 0x79, 0x20, 0x99, 0x0d, 0x32, 0x02, 0x0e, 0xd3, 0x89, 0x2b, 0xd1, 0x4d,
	0x11, 0x63, 0x61, 0xa5, 0x1c, 0x25, 0xd2, 0x76, 0xee, 0x66, 0xe5, 0x6e, 0x47, 0x07, 0xfb, 0x21,
	0x86, 0xa8, 0x3e, 0xd9, 0xd9, 0x29, 0xf7, 0x32, 0x7f, 0x6a, 0xa4, 0xf5, 0x12, 0x62, 0x08, 0x99,
	0x84, 0xf7, 0x28, 0x81, 0xee, 0x93, 0xed, 0x04, 0x13, 0x1f, 0x74, 0xad, 0xab, 0xf5, 0x1a, 0x4e,
	0x6e, 0x50, 0x97, 0xec, 0x06, 0xb9, 0x17, 0x72, 0xbd, 0xd6, 0xd5, 0x7a, 0xad, 0xfe, 0xc9, 0xf5,
	0xec, 0xf0, 0x38, 0x1c, 0xc9, 0x68, 0xea, 0x59, 0x3e, 0x4e, 0x6c, 0x2f, 0xc6, 0x0b, 0x96, 0xa6,
	0xb6, 0xca, 0xe1, 0x71, 0x02, 0xf2, 0x1c, 0xf9, 0xd8, 0x16, 0x11, 0xe3, 0x10, 0xd8, 0xf2, 0x32,
	0x05, 0x61, 0xbd, 0x2a, 0x52, 0x3d, 0x09, 0x02, 0x0e, 0x42, 0x38, 0x2b, 0x4d, 0xfa, 0x96, 0xd4,
	0x24, 0xea, 0xf5, 0x4d, 0x29, 0xd7, 0x24, 0x66, 0x95, 0xa4, 0x78, 0x0e, 0x5c, 0x6f, 0xe4, 0x95,
	0x28, 0xc3, 0x9c, 0x69, 0xa4, 0x7d, 0x96, 0xfc, 0x41, 0xc9, 0x67, 0xa4, 0xf1, 0x91, 0xe3, 0x64,
	0x73, 0xd5, 0x2a, 0xb9, 0x2a, 0xc9, 0xfa, 0xe6, 0x49, 0x9a, 0x26, 0x21, 0x03, 0x0e, 0x4c, 0xc2,
	0x29, 0x62, 0xbc, 0xbe, 0x36, 0xf3, 0x4b, 0x8d, 0xb4, 0x73, 0xa7, 0x37, 0x29, 0x70, 0xf5, 0x03,
	0xd6, 0x43, 0x88, 0x49, 0xa7, 0xec, 0x2f, 0x96, 0xbf, 0xb5, 0x39, 0x20, 0x7b, 0x50, 0xbd, 0xa0,
	0x13, 0xd2, 0xf1, 0x31, 0x11, 0x90, 0x88, 0xa9, 0x70, 0xd3, 0xa9, 0x37, 0x86, 0xcb, 0x02, 0x51,
	0xff, 0x7a, 0x76, 0xf8, 0xfc, 0xef, 0x5e, 0x1b, 0x2c, 0x95, 0xca, 0xe7, 0x4a, 0xed, 0x53, 0x25,
	0x4d, 0xef, 0x93, 0x5d, 0x90, 0x91, 0x2b, 0x24, 0x1b, 0x43, 0xd1, 0x24, 0x77, 0x41, 0x46, 0xef,
	0x32, 0xdb, 0xfc, 0xda, 0x20, 0x9d, 0xd7, 0x22, 0x5c, 0xe6, 0x3c, 0x88, 0xd9, 0x68, 0x42, 0x1f,
	0x91, 0x7b, 0x25, 0x0e, 0x3f, 0x62, 0xa3, 0xc4, 0x1d, 0x05, 0x05, 0xb0, 0xb2, 0x98, 0x41, 0x76,
	0x3f, 0x0c, 0x32, 0x74, 0x3e, 0x26, 0x92, 0x33, 0x5f, 0xfe, 0x03, 0x74, 0x4b, 0xe9, 0xff, 0x84,
	0xee, 0x59, 0xd9, 0xc5, 0x20, 0xf4, 0x46, 0xb7, 0xde, 0x6b, 0x3e, 0x79, 0x60, 0x55, 0x17, 0x8e,
	0x75, 0x73, 0xc6, 0x9c, 0x95, 0x3b, 0x7d, 0x41, 0x9a, 0xd3, 0x64, 0x15, 0xbd, 0xad, 0xa2, 0x8d,
	0xdb, 0xd1, 0xd5, 0x19, 0x75, 0x6e, 0x86, 0xd0, 0x63, 0xd2, 0xf2, 0x55, 0xf7, 0xe6, 0x0b, 0x4f,
	0xdf, 0x51, 0x12, 0x07, 0xb7, 0x25, 0x56, 0x63, 0xe0, 0x34, 0xfd, 0xf2, 0x2c, 0xe8, 0x90, 0x74,
	0x8a, 0x70, 0x2c, 0xba, 0x5f, 0xe8, 0x77, 0xd6, 0x67, 0x51, 0x1d, 0x12, 0x67, 0xcf, 0xaf, 0xd8,
	0xa2, 0x3f, 0xfc, 0x36, 0x37, 0xb4, 0xab, 0xb9, 0xa1, 0xfd, 0x98, 0x1b, 0xda, 0xe7, 0x85, 0xb1,
	0x75, 0xb5, 0x30, 0xb6, 0xbe, 0x2f, 0x8c, 0xad, 0x0f, 0xf6, 0x6f, 0x91, 0x5f, 0xd8, 0xc5, 0x22,
	0x57, 0xd0, 0xbd, 0x1d, 0xb5, 0x90, 0x9f, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xb6, 0x3e,
	0x27, 0xdf, 0x05, 0x00, 0x00,
}

func (m *DelegateVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegateVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegateVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintEthereumToPools(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x20
	}
	if m.To != nil {
		{
			size := m.To.Size()
			i -= size
			if _, err := m.To.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Delegator != nil {
		{
			size := m.Delegator.Size()
			i -= size
			if _, err := m.Delegator.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintEthereumToPools(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnDelegateVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnDelegateVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnDelegateVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Delegator != nil {
		{
			size := m.Delegator.Size()
			i -= size
			if _, err := m.Delegator.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.From != nil {
		{
			size := m.From.Size()
			i -= size
			if _, err := m.From.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintEthereumToPools(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintEthereumToPools(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EthStake != 0 {
		i = encodeVarintEthereumToPools(dAtA, i, uint64(m.EthStake))
		i--
		dAtA[i] = 0x20
	}
	if m.ConsensusPubkey != nil {
		{
			size := m.ConsensusPubkey.Size()
			i -= size
			if _, err := m.ConsensusPubkey.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.EthereumAddress != nil {
		{
			size := m.EthereumAddress.Size()
			i -= size
			if _, err := m.EthereumAddress.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintEthereumToPools(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgEthereumClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEthereumClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEthereumClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CreateOperators) > 0 {
		for iNdEx := len(m.CreateOperators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CreateOperators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.CreatePools) > 0 {
		for iNdEx := len(m.CreatePools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CreatePools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Undelegates) > 0 {
		for iNdEx := len(m.Undelegates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Undelegates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Delegates) > 0 {
		for iNdEx := len(m.Delegates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ConsensusPubkey != nil {
		{
			size := m.ConsensusPubkey.Size()
			i -= size
			if _, err := m.ConsensusPubkey.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ContractAddress != nil {
		{
			size := m.ContractAddress.Size()
			i -= size
			if _, err := m.ContractAddress.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEthereumToPools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EthereumChainId != 0 {
		i = encodeVarintEthereumToPools(dAtA, i, uint64(m.EthereumChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEthereumToPools(dAtA []byte, offset int, v uint64) int {
	offset -= sovEthereumToPools(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DelegateVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovEthereumToPools(uint64(m.Nonce))
	}
	if m.Delegator != nil {
		l = m.Delegator.Size()
		n += 1 + l + sovEthereumToPools(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovEthereumToPools(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovEthereumToPools(uint64(m.Power))
	}
	return n
}

func (m *UnDelegateVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovEthereumToPools(uint64(m.Nonce))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovEthereumToPools(uint64(l))
	}
	if m.Delegator != nil {
		l = m.Delegator.Size()
		n += 1 + l + sovEthereumToPools(uint64(l))
	}
	return n
}

func (m *CreatePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovEthereumToPools(uint64(m.Nonce))
	}
	return n
}

func (m *CreateOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovEthereumToPools(uint64(m.Nonce))
	}
	if m.EthereumAddress != nil {
		l = m.EthereumAddress.Size()
		n += 1 + l + sovEthereumToPools(uint64(l))
	}
	if m.ConsensusPubkey != nil {
		l = m.ConsensusPubkey.Size()
		n += 1 + l + sovEthereumToPools(uint64(l))
	}
	if m.EthStake != 0 {
		n += 1 + sovEthereumToPools(uint64(m.EthStake))
	}
	return n
}

func (m *MsgEthereumClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EthereumChainId != 0 {
		n += 1 + sovEthereumToPools(uint64(m.EthereumChainId))
	}
	if m.ContractAddress != nil {
		l = m.ContractAddress.Size()
		n += 1 + l + sovEthereumToPools(uint64(l))
	}
	if m.ConsensusPubkey != nil {
		l = m.ConsensusPubkey.Size()
		n += 1 + l + sovEthereumToPools(uint64(l))
	}
	if len(m.Delegates) > 0 {
		for _, e := range m.Delegates {
			l = e.Size()
			n += 1 + l + sovEthereumToPools(uint64(l))
		}
	}
	if len(m.Undelegates) > 0 {
		for _, e := range m.Undelegates {
			l = e.Size()
			n += 1 + l + sovEthereumToPools(uint64(l))
		}
	}
	if len(m.CreatePools) > 0 {
		for _, e := range m.CreatePools {
			l = e.Size()
			n += 1 + l + sovEthereumToPools(uint64(l))
		}
	}
	if len(m.CreateOperators) > 0 {
		for _, e := range m.CreateOperators {
			l = e.Size()
			n += 1 + l + sovEthereumToPools(uint64(l))
		}
	}
	return n
}

func sovEthereumToPools(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEthereumToPools(x uint64) (n int) {
	return sovEthereumToPools(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DelegateVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereumToPools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegateVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegateVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_bloxapp_pools_network_shared_types.EthereumAddress
			m.Delegator = &v
			if err := m.Delegator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_bloxapp_pools_network_shared_types.EthereumAddress
			m.To = &v
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEthereumToPools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnDelegateVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereumToPools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnDelegateVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnDelegateVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_bloxapp_pools_network_shared_types.EthereumAddress
			m.From = &v
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_bloxapp_pools_network_shared_types.EthereumAddress
			m.Delegator = &v
			if err := m.Delegator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthereumToPools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereumToPools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEthereumToPools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereumToPools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_bloxapp_pools_network_shared_types.EthereumAddress
			m.EthereumAddress = &v
			if err := m.EthereumAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_bloxapp_pools_network_shared_types.ConsensusAddress
			m.ConsensusPubkey = &v
			if err := m.ConsensusPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthStake", wireType)
			}
			m.EthStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEthereumToPools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEthereumClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereumToPools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEthereumClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEthereumClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumChainId", wireType)
			}
			m.EthereumChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthereumChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_bloxapp_pools_network_shared_types.EthereumAddress
			m.ContractAddress = &v
			if err := m.ContractAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_bloxapp_pools_network_shared_types.ConsensusAddress
			m.ConsensusPubkey = &v
			if err := m.ConsensusPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegates = append(m.Delegates, &DelegateVote{})
			if err := m.Delegates[len(m.Delegates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Undelegates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Undelegates = append(m.Undelegates, &UnDelegateVote{})
			if err := m.Undelegates[len(m.Undelegates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatePools = append(m.CreatePools, &CreatePool{})
			if err := m.CreatePools[len(m.CreatePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateOperators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateOperators = append(m.CreateOperators, &CreateOperator{})
			if err := m.CreateOperators[len(m.CreateOperators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthereumToPools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEthereumToPools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEthereumToPools(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEthereumToPools
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthereumToPools
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEthereumToPools
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEthereumToPools
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEthereumToPools
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEthereumToPools        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEthereumToPools          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEthereumToPools = fmt.Errorf("proto: unexpected end of group")
)
