// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bridge/v1beta/ethereum_to_pools.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgEthereumClaim_ClaimType int32

const (
	MsgEthereumClaim_DELEGATE   MsgEthereumClaim_ClaimType = 0
	MsgEthereumClaim_UNDELEGATE MsgEthereumClaim_ClaimType = 1
	MsgEthereumClaim_CREATEPOOL MsgEthereumClaim_ClaimType = 2
)

var MsgEthereumClaim_ClaimType_name = map[int32]string{
	0: "DELEGATE",
	1: "UNDELEGATE",
	2: "CREATEPOOL",
}

var MsgEthereumClaim_ClaimType_value = map[string]int32{
	"DELEGATE":   0,
	"UNDELEGATE": 1,
	"CREATEPOOL": 2,
}

func (x MsgEthereumClaim_ClaimType) String() string {
	return proto.EnumName(MsgEthereumClaim_ClaimType_name, int32(x))
}

func (MsgEthereumClaim_ClaimType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3c24a139c4d70ef, []int{2, 0}
}

type DelegateVote struct {
	From  []byte `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To    []byte `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Power uint64 `protobuf:"varint,3,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *DelegateVote) Reset()         { *m = DelegateVote{} }
func (m *DelegateVote) String() string { return proto.CompactTextString(m) }
func (*DelegateVote) ProtoMessage()    {}
func (*DelegateVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3c24a139c4d70ef, []int{0}
}
func (m *DelegateVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegateVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegateVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegateVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegateVote.Merge(m, src)
}
func (m *DelegateVote) XXX_Size() int {
	return m.Size()
}
func (m *DelegateVote) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegateVote.DiscardUnknown(m)
}

var xxx_messageInfo_DelegateVote proto.InternalMessageInfo

func (m *DelegateVote) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DelegateVote) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DelegateVote) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

type CreatePool struct {
}

func (m *CreatePool) Reset()         { *m = CreatePool{} }
func (m *CreatePool) String() string { return proto.CompactTextString(m) }
func (*CreatePool) ProtoMessage()    {}
func (*CreatePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3c24a139c4d70ef, []int{1}
}
func (m *CreatePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePool.Merge(m, src)
}
func (m *CreatePool) XXX_Size() int {
	return m.Size()
}
func (m *CreatePool) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePool.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePool proto.InternalMessageInfo

type MsgEthereumClaim struct {
	ClaimType MsgEthereumClaim_ClaimType `protobuf:"varint,1,opt,name=claim_type,json=claimType,proto3,enum=bridge.v1beta1.MsgEthereumClaim_ClaimType" json:"claim_type,omitempty"`
	// Types that are valid to be assigned to Object:
	//	*MsgEthereumClaim_Delegate
	//	*MsgEthereumClaim_CreatePool
	Object isMsgEthereumClaim_Object `protobuf_oneof:"object"`
}

func (m *MsgEthereumClaim) Reset()         { *m = MsgEthereumClaim{} }
func (m *MsgEthereumClaim) String() string { return proto.CompactTextString(m) }
func (*MsgEthereumClaim) ProtoMessage()    {}
func (*MsgEthereumClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3c24a139c4d70ef, []int{2}
}
func (m *MsgEthereumClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEthereumClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEthereumClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEthereumClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEthereumClaim.Merge(m, src)
}
func (m *MsgEthereumClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgEthereumClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEthereumClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEthereumClaim proto.InternalMessageInfo

type isMsgEthereumClaim_Object interface {
	isMsgEthereumClaim_Object()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MsgEthereumClaim_Delegate struct {
	Delegate *DelegateVote `protobuf:"bytes,20,opt,name=delegate,proto3,oneof" json:"delegate,omitempty"`
}
type MsgEthereumClaim_CreatePool struct {
	CreatePool *CreatePool `protobuf:"bytes,21,opt,name=create_pool,json=createPool,proto3,oneof" json:"create_pool,omitempty"`
}

func (*MsgEthereumClaim_Delegate) isMsgEthereumClaim_Object()   {}
func (*MsgEthereumClaim_CreatePool) isMsgEthereumClaim_Object() {}

func (m *MsgEthereumClaim) GetObject() isMsgEthereumClaim_Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *MsgEthereumClaim) GetClaimType() MsgEthereumClaim_ClaimType {
	if m != nil {
		return m.ClaimType
	}
	return MsgEthereumClaim_DELEGATE
}

func (m *MsgEthereumClaim) GetDelegate() *DelegateVote {
	if x, ok := m.GetObject().(*MsgEthereumClaim_Delegate); ok {
		return x.Delegate
	}
	return nil
}

func (m *MsgEthereumClaim) GetCreatePool() *CreatePool {
	if x, ok := m.GetObject().(*MsgEthereumClaim_CreatePool); ok {
		return x.CreatePool
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgEthereumClaim) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgEthereumClaim_Delegate)(nil),
		(*MsgEthereumClaim_CreatePool)(nil),
	}
}

func init() {
	proto.RegisterEnum("bridge.v1beta1.MsgEthereumClaim_ClaimType", MsgEthereumClaim_ClaimType_name, MsgEthereumClaim_ClaimType_value)
	proto.RegisterType((*DelegateVote)(nil), "bridge.v1beta1.DelegateVote")
	proto.RegisterType((*CreatePool)(nil), "bridge.v1beta1.CreatePool")
	proto.RegisterType((*MsgEthereumClaim)(nil), "bridge.v1beta1.MsgEthereumClaim")
}

func init() {
	proto.RegisterFile("bridge/v1beta/ethereum_to_pools.proto", fileDescriptor_d3c24a139c4d70ef)
}

var fileDescriptor_d3c24a139c4d70ef = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcf, 0x6a, 0xea, 0x40,
	0x14, 0xc6, 0x33, 0xb9, 0x5e, 0xd1, 0x63, 0x08, 0x32, 0x78, 0x21, 0x5c, 0x2e, 0x41, 0xb2, 0x92,
	0x0b, 0x4d, 0xd0, 0xae, 0x5a, 0xe8, 0xc2, 0x3f, 0xa1, 0x0a, 0xb6, 0x4a, 0xb0, 0x5d, 0x74, 0x23,
	0x49, 0x3c, 0x8d, 0xb6, 0x49, 0x27, 0xc4, 0xb1, 0xea, 0x5b, 0xf4, 0x05, 0xfa, 0x3e, 0x5d, 0xba,
	0xec, 0xb2, 0xe8, 0x8b, 0x94, 0x8c, 0x56, 0x5b, 0x37, 0xe1, 0x7c, 0xe1, 0xfb, 0x66, 0x7e, 0xdf,
	0x1c, 0x30, 0xbc, 0x64, 0x32, 0x0a, 0xd0, 0x7a, 0xae, 0x7a, 0xc8, 0x5d, 0x0b, 0xf9, 0x18, 0x13,
	0x9c, 0x45, 0x43, 0x3f, 0x74, 0x27, 0x91, 0x19, 0x27, 0x8c, 0x33, 0xaa, 0x6e, 0x3d, 0xe6, 0xd6,
	0x53, 0x35, 0xda, 0xa0, 0xb4, 0x30, 0xc4, 0xc0, 0xe5, 0x78, 0xcb, 0x38, 0x52, 0x0a, 0x99, 0xfb,
	0x84, 0x45, 0x1a, 0x29, 0x93, 0x8a, 0xe2, 0x88, 0x99, 0xaa, 0x20, 0x73, 0xa6, 0xc9, 0xe2, 0x8f,
	0xcc, 0x19, 0x2d, 0xc1, 0xef, 0x98, 0xcd, 0x31, 0xd1, 0x7e, 0x95, 0x49, 0x25, 0xe3, 0x6c, 0x85,
	0xa1, 0x00, 0x34, 0x13, 0x74, 0x39, 0xf6, 0x19, 0x0b, 0x8d, 0x57, 0x19, 0x8a, 0x57, 0xd3, 0xc0,
	0xde, 0x31, 0x34, 0x53, 0x04, 0xda, 0x01, 0x10, 0x2c, 0x43, 0xbe, 0x8c, 0x51, 0x5c, 0xa1, 0xd6,
	0xfe, 0x9b, 0x3f, 0x89, 0xcc, 0xe3, 0x94, 0x29, 0xbe, 0x83, 0x65, 0x8c, 0x4e, 0xde, 0xff, 0x1a,
	0xe9, 0x39, 0xe4, 0x46, 0x3b, 0x6e, 0xad, 0x54, 0x26, 0x95, 0x42, 0xed, 0xdf, 0xf1, 0x41, 0xdf,
	0x7b, 0xb5, 0x25, 0x67, 0xef, 0xa7, 0x17, 0x50, 0xf0, 0x05, 0xe9, 0x30, 0x66, 0x2c, 0xd4, 0xfe,
	0x88, 0xf8, 0xdf, 0xe3, 0xf8, 0xa1, 0x4c, 0x5b, 0x72, 0xc0, 0x3f, 0x54, 0x3b, 0x83, 0xfc, 0x1e,
	0x89, 0x2a, 0x90, 0x6b, 0xd9, 0x5d, 0xfb, 0xb2, 0x3e, 0xb0, 0x8b, 0x12, 0x55, 0x01, 0x6e, 0xae,
	0xf7, 0x9a, 0xa4, 0xba, 0xe9, 0xd8, 0xf5, 0x81, 0xdd, 0xef, 0xf5, 0xba, 0x45, 0xb9, 0x91, 0x83,
	0x2c, 0xf3, 0x1e, 0xd0, 0xe7, 0x8d, 0xce, 0xdb, 0x5a, 0x27, 0xab, 0xb5, 0x4e, 0x3e, 0xd6, 0x3a,
	0x79, 0xd9, 0xe8, 0xd2, 0x6a, 0xa3, 0x4b, 0xef, 0x1b, 0x5d, 0xba, 0xb3, 0x82, 0x09, 0x1f, 0xcf,
	0x3c, 0xd3, 0x67, 0x91, 0xe5, 0x85, 0x6c, 0xe1, 0xc6, 0xb1, 0x95, 0x72, 0x4e, 0x4f, 0x9e, 0x90,
	0xcf, 0x59, 0xf2, 0x68, 0x2d, 0xac, 0xdd, 0xa2, 0xd3, 0x67, 0x9c, 0x7a, 0x59, 0xb1, 0xd9, 0xd3,
	0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0x0c, 0xe2, 0x4d, 0xff, 0x01, 0x00, 0x00,
}

func (m *DelegateVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegateVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegateVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintEthereumClaim(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x18
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintEthereumClaim(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintEthereumClaim(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreatePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEthereumClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEthereumClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEthereumClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Object != nil {
		{
			size := m.Object.Size()
			i -= size
			if _, err := m.Object.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClaimType != 0 {
		i = encodeVarintEthereumClaim(dAtA, i, uint64(m.ClaimType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgEthereumClaim_Delegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEthereumClaim_Delegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Delegate != nil {
		{
			size, err := m.Delegate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEthereumClaim(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *MsgEthereumClaim_CreatePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEthereumClaim_CreatePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreatePool != nil {
		{
			size, err := m.CreatePool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEthereumClaim(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func encodeVarintEthereumClaim(dAtA []byte, offset int, v uint64) int {
	offset -= sovEthereumClaim(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DelegateVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovEthereumClaim(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovEthereumClaim(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovEthereumClaim(uint64(m.Power))
	}
	return n
}

func (m *CreatePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEthereumClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClaimType != 0 {
		n += 1 + sovEthereumClaim(uint64(m.ClaimType))
	}
	if m.Object != nil {
		n += m.Object.Size()
	}
	return n
}

func (m *MsgEthereumClaim_Delegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Delegate != nil {
		l = m.Delegate.Size()
		n += 2 + l + sovEthereumClaim(uint64(l))
	}
	return n
}
func (m *MsgEthereumClaim_CreatePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreatePool != nil {
		l = m.CreatePool.Size()
		n += 2 + l + sovEthereumClaim(uint64(l))
	}
	return n
}

func sovEthereumClaim(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEthereumClaim(x uint64) (n int) {
	return sovEthereumClaim(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DelegateVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereumClaim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegateVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegateVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumClaim
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From[:0], dAtA[iNdEx:postIndex]...)
			if m.From == nil {
				m.From = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumClaim
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = append(m.To[:0], dAtA[iNdEx:postIndex]...)
			if m.To == nil {
				m.To = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEthereumClaim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEthereumClaim
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEthereumClaim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereumClaim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEthereumClaim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEthereumClaim
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEthereumClaim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEthereumClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereumClaim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEthereumClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEthereumClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimType", wireType)
			}
			m.ClaimType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimType |= MsgEthereumClaim_ClaimType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthereumClaim
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DelegateVote{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Object = &MsgEthereumClaim_Delegate{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatePool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthereumClaim
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthereumClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreatePool{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Object = &MsgEthereumClaim_CreatePool{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthereumClaim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEthereumClaim
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEthereumClaim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEthereumClaim(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEthereumClaim
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthereumClaim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthereumClaim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEthereumClaim
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEthereumClaim
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEthereumClaim
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEthereumClaim        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEthereumClaim          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEthereumClaim = fmt.Errorf("proto: unexpected end of group")
)
