// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bridge/v1beta/pools_to_ethereum.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_ethereum_go_ethereum_common "github.com/ethereum/go-ethereum/common"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValSetChange struct {
	Address  *github_com_ethereum_go_ethereum_common.Address `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/ethereum/go-ethereum/common.Address" json:"address,omitempty"`
	NewPower uint64                                          `protobuf:"varint,2,opt,name=new_power,json=newPower,proto3" json:"new_power,omitempty"`
}

func (m *ValSetChange) Reset()         { *m = ValSetChange{} }
func (m *ValSetChange) String() string { return proto.CompactTextString(m) }
func (*ValSetChange) ProtoMessage()    {}
func (*ValSetChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc300e9b99542c6a, []int{0}
}
func (m *ValSetChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValSetChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValSetChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValSetChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValSetChange.Merge(m, src)
}
func (m *ValSetChange) XXX_Size() int {
	return m.Size()
}
func (m *ValSetChange) XXX_DiscardUnknown() {
	xxx_messageInfo_ValSetChange.DiscardUnknown(m)
}

var xxx_messageInfo_ValSetChange proto.InternalMessageInfo

func (m *ValSetChange) GetAddress() *github_com_ethereum_go_ethereum_common.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ValSetChange) GetNewPower() uint64 {
	if m != nil {
		return m.NewPower
	}
	return 0
}

type ETHBalanceChange struct {
	TotalEth uint64 `protobuf:"varint,1,opt,name=total_eth,json=totalEth,proto3" json:"total_eth,omitempty"`
}

func (m *ETHBalanceChange) Reset()         { *m = ETHBalanceChange{} }
func (m *ETHBalanceChange) String() string { return proto.CompactTextString(m) }
func (*ETHBalanceChange) ProtoMessage()    {}
func (*ETHBalanceChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc300e9b99542c6a, []int{1}
}
func (m *ETHBalanceChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ETHBalanceChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ETHBalanceChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ETHBalanceChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ETHBalanceChange.Merge(m, src)
}
func (m *ETHBalanceChange) XXX_Size() int {
	return m.Size()
}
func (m *ETHBalanceChange) XXX_DiscardUnknown() {
	xxx_messageInfo_ETHBalanceChange.DiscardUnknown(m)
}

var xxx_messageInfo_ETHBalanceChange proto.InternalMessageInfo

func (m *ETHBalanceChange) GetTotalEth() uint64 {
	if m != nil {
		return m.TotalEth
	}
	return 0
}

type Withdraw struct {
	To          []byte                                          `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Amount      uint64                                          `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	CoinAddress *github_com_ethereum_go_ethereum_common.Address `protobuf:"bytes,3,opt,name=coin_address,json=coinAddress,proto3,casttype=github.com/ethereum/go-ethereum/common.Address" json:"coin_address,omitempty"`
}

func (m *Withdraw) Reset()         { *m = Withdraw{} }
func (m *Withdraw) String() string { return proto.CompactTextString(m) }
func (*Withdraw) ProtoMessage()    {}
func (*Withdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc300e9b99542c6a, []int{2}
}
func (m *Withdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Withdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Withdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Withdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Withdraw.Merge(m, src)
}
func (m *Withdraw) XXX_Size() int {
	return m.Size()
}
func (m *Withdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_Withdraw.DiscardUnknown(m)
}

var xxx_messageInfo_Withdraw proto.InternalMessageInfo

func (m *Withdraw) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Withdraw) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Withdraw) GetCoinAddress() *github_com_ethereum_go_ethereum_common.Address {
	if m != nil {
		return m.CoinAddress
	}
	return nil
}

// nonce is the monotonic id of an update
type MsgBridgedUpdate struct {
	Nonce        uint64            `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ValSetChange []*ValSetChange   `protobuf:"bytes,2,rep,name=val_set_change,json=valSetChange,proto3" json:"val_set_change,omitempty"`
	NewBalance   *ETHBalanceChange `protobuf:"bytes,3,opt,name=new_balance,json=newBalance,proto3" json:"new_balance,omitempty"`
	Withdrawals  []*Withdraw       `protobuf:"bytes,4,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
}

func (m *MsgBridgedUpdate) Reset()         { *m = MsgBridgedUpdate{} }
func (m *MsgBridgedUpdate) String() string { return proto.CompactTextString(m) }
func (*MsgBridgedUpdate) ProtoMessage()    {}
func (*MsgBridgedUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc300e9b99542c6a, []int{3}
}
func (m *MsgBridgedUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgedUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgedUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgedUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgedUpdate.Merge(m, src)
}
func (m *MsgBridgedUpdate) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgedUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgedUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgedUpdate proto.InternalMessageInfo

func (m *MsgBridgedUpdate) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgBridgedUpdate) GetValSetChange() []*ValSetChange {
	if m != nil {
		return m.ValSetChange
	}
	return nil
}

func (m *MsgBridgedUpdate) GetNewBalance() *ETHBalanceChange {
	if m != nil {
		return m.NewBalance
	}
	return nil
}

func (m *MsgBridgedUpdate) GetWithdrawals() []*Withdraw {
	if m != nil {
		return m.Withdrawals
	}
	return nil
}

// MsgBridgedUpdateConfirm is a signed container for a bridged update (pools -> ethereum).
// This is a single operator's signatur.
// nonce is the monotonic id of an update
type MsgBridgedUpdateConfirm struct {
	Nonce           uint64                                          `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Signature       []byte                                          `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	EthereumAddress *github_com_ethereum_go_ethereum_common.Address `protobuf:"bytes,3,opt,name=ethereum_address,json=ethereumAddress,proto3,casttype=github.com/ethereum/go-ethereum/common.Address" json:"ethereum_address,omitempty"`
}

func (m *MsgBridgedUpdateConfirm) Reset()         { *m = MsgBridgedUpdateConfirm{} }
func (m *MsgBridgedUpdateConfirm) String() string { return proto.CompactTextString(m) }
func (*MsgBridgedUpdateConfirm) ProtoMessage()    {}
func (*MsgBridgedUpdateConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc300e9b99542c6a, []int{4}
}
func (m *MsgBridgedUpdateConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgedUpdateConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgedUpdateConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgedUpdateConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgedUpdateConfirm.Merge(m, src)
}
func (m *MsgBridgedUpdateConfirm) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgedUpdateConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgedUpdateConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgedUpdateConfirm proto.InternalMessageInfo

func (m *MsgBridgedUpdateConfirm) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgBridgedUpdateConfirm) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *MsgBridgedUpdateConfirm) GetEthereumAddress() *github_com_ethereum_go_ethereum_common.Address {
	if m != nil {
		return m.EthereumAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*ValSetChange)(nil), "bridge.v1beta1.ValSetChange")
	proto.RegisterType((*ETHBalanceChange)(nil), "bridge.v1beta1.ETHBalanceChange")
	proto.RegisterType((*Withdraw)(nil), "bridge.v1beta1.Withdraw")
	proto.RegisterType((*MsgBridgedUpdate)(nil), "bridge.v1beta1.MsgBridgedUpdate")
	proto.RegisterType((*MsgBridgedUpdateConfirm)(nil), "bridge.v1beta1.MsgBridgedUpdateConfirm")
}

func init() {
	proto.RegisterFile("bridge/v1beta/pools_to_ethereum.proto", fileDescriptor_bc300e9b99542c6a)
}

var fileDescriptor_bc300e9b99542c6a = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x4d, 0x8b, 0xd3, 0x40,
	0x18, 0x6e, 0xba, 0x75, 0x6d, 0xa7, 0xa5, 0x96, 0x50, 0xb4, 0xee, 0x2e, 0xb1, 0x14, 0x84, 0x5e,
	0x76, 0x86, 0xad, 0x37, 0x6f, 0xed, 0xb2, 0xa0, 0x07, 0x41, 0xe2, 0x17, 0x78, 0x09, 0x93, 0xe4,
	0xdd, 0x69, 0xd8, 0x64, 0xde, 0x90, 0x4c, 0x9b, 0xed, 0xaf, 0xd0, 0x7f, 0xe0, 0x7f, 0xf1, 0xe4,
	0x71, 0x8f, 0x9e, 0x44, 0xda, 0xa3, 0xff, 0xc0, 0x93, 0x74, 0x32, 0xd1, 0x5a, 0xf0, 0xe6, 0xde,
	0xe6, 0xfd, 0x98, 0x67, 0x9e, 0x0f, 0x86, 0x3c, 0xf6, 0xb3, 0x28, 0x14, 0xc0, 0x96, 0x67, 0x3e,
	0x28, 0xce, 0x52, 0xc4, 0x38, 0xf7, 0x14, 0x7a, 0xa0, 0xe6, 0x90, 0xc1, 0x22, 0xa1, 0x69, 0x86,
	0x0a, 0xed, 0x6e, 0xb9, 0x46, 0xcb, 0xb5, 0xb3, 0xa3, 0xbe, 0x40, 0x81, 0x7a, 0xc4, 0xb6, 0xa7,
	0x72, 0xeb, 0xe8, 0xa1, 0x40, 0x14, 0x31, 0x30, 0x5d, 0xf9, 0x8b, 0x4b, 0xc6, 0xe5, 0xaa, 0x1c,
	0x8d, 0x3e, 0x58, 0xa4, 0xf3, 0x96, 0xc7, 0xaf, 0x40, 0x9d, 0xcf, 0xb9, 0x14, 0x60, 0xfb, 0xe4,
	0x2e, 0x0f, 0xc3, 0x0c, 0xf2, 0x7c, 0x60, 0x0d, 0xad, 0x71, 0x7b, 0xd2, 0xa7, 0xe5, 0x6d, 0x5a,
	0xdd, 0xa6, 0x53, 0xb9, 0x9a, 0x4d, 0x7e, 0x7e, 0x7b, 0x44, 0x45, 0xa4, 0xe6, 0x0b, 0x9f, 0x06,
	0x98, 0xb0, 0x8a, 0x17, 0x13, 0x78, 0xfa, 0xfb, 0x1c, 0x60, 0x92, 0xa0, 0xa4, 0xd3, 0x12, 0xcf,
	0xad, 0x80, 0xed, 0x63, 0xd2, 0x92, 0x50, 0x78, 0x29, 0x16, 0x90, 0x0d, 0xea, 0x43, 0x6b, 0xdc,
	0x70, 0x9b, 0x12, 0x8a, 0x97, 0xdb, 0x7a, 0xc4, 0x48, 0xef, 0xe2, 0xf5, 0xb3, 0x19, 0x8f, 0xb9,
	0x0c, 0xc0, 0x90, 0x3a, 0x26, 0x2d, 0x85, 0x8a, 0xc7, 0x5b, 0xf9, 0x9a, 0x56, 0xc3, 0x6d, 0xea,
	0xc6, 0x85, 0x9a, 0x8f, 0x3e, 0x59, 0xa4, 0xf9, 0x2e, 0x52, 0xf3, 0x30, 0xe3, 0x85, 0xdd, 0x25,
	0x75, 0x85, 0x7a, 0xa5, 0xe3, 0xd6, 0x15, 0xda, 0xf7, 0xc9, 0x21, 0x4f, 0x70, 0x21, 0x95, 0x79,
	0xc7, 0x54, 0xf6, 0x15, 0xe9, 0x04, 0x18, 0x49, 0xaf, 0xd2, 0x7a, 0xf0, 0x9f, 0xb5, 0xb6, 0xb7,
	0xe8, 0xa6, 0x18, 0xfd, 0xb0, 0x48, 0xef, 0x45, 0x2e, 0x66, 0x3a, 0xab, 0xf0, 0x4d, 0x1a, 0x72,
	0x05, 0x76, 0x9f, 0xdc, 0x91, 0x28, 0x03, 0x30, 0x7a, 0xca, 0xc2, 0x9e, 0x91, 0xee, 0x92, 0xc7,
	0x5e, 0x0e, 0xca, 0x0b, 0xb4, 0xf6, 0x41, 0x7d, 0x78, 0x30, 0x6e, 0x4f, 0x4e, 0xe8, 0xdf, 0x49,
	0xd3, 0xdd, 0xd0, 0xdc, 0xce, 0x72, 0x37, 0xc2, 0x29, 0x69, 0x6f, 0xed, 0xf5, 0x4b, 0x0b, 0x8d,
	0xb4, 0xe1, 0x3e, 0xc0, 0xbe, 0xc9, 0x2e, 0x91, 0x50, 0x98, 0x8e, 0xfd, 0x94, 0xb4, 0x0b, 0x63,
	0x29, 0x8f, 0xf3, 0x41, 0x43, 0x73, 0x18, 0xec, 0x43, 0x54, 0xae, 0xbb, 0xbb, 0xcb, 0xa3, 0xcf,
	0x16, 0x79, 0xb0, 0xaf, 0xf6, 0x1c, 0xe5, 0x65, 0x94, 0x25, 0xff, 0x10, 0x7d, 0x42, 0x5a, 0x79,
	0x24, 0x24, 0x57, 0x8b, 0x0c, 0x74, 0x4e, 0x1d, 0xf7, 0x4f, 0xc3, 0xce, 0x49, 0xaf, 0x72, 0xf9,
	0xd6, 0xe2, 0xba, 0x57, 0x0d, 0x4c, 0x63, 0xf6, 0xfc, 0xcb, 0xda, 0xb1, 0x6e, 0xd6, 0x8e, 0xf5,
	0x7d, 0xed, 0x58, 0x1f, 0x37, 0x4e, 0xed, 0x66, 0xe3, 0xd4, 0xbe, 0x6e, 0x9c, 0xda, 0x7b, 0xb6,
	0x03, 0xed, 0xc7, 0x78, 0xcd, 0xd3, 0xb4, 0xfc, 0x9e, 0xa7, 0x12, 0x54, 0x81, 0xd9, 0x15, 0xbb,
	0x66, 0xe6, 0xf3, 0xaa, 0x55, 0x0a, 0xb9, 0x7f, 0xa8, 0xd9, 0x3d, 0xf9, 0x15, 0x00, 0x00, 0xff,
	0xff, 0x47, 0x9d, 0x87, 0x4e, 0xd3, 0x03, 0x00, 0x00,
}

func (m *ValSetChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValSetChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValSetChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewPower != 0 {
		i = encodeVarintPoolsToEthereum(dAtA, i, uint64(m.NewPower))
		i--
		dAtA[i] = 0x10
	}
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPoolsToEthereum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ETHBalanceChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ETHBalanceChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ETHBalanceChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalEth != 0 {
		i = encodeVarintPoolsToEthereum(dAtA, i, uint64(m.TotalEth))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Withdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Withdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Withdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CoinAddress != nil {
		{
			size, err := m.CoinAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPoolsToEthereum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintPoolsToEthereum(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintPoolsToEthereum(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBridgedUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgedUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgedUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Withdrawals) > 0 {
		for iNdEx := len(m.Withdrawals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Withdrawals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPoolsToEthereum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.NewBalance != nil {
		{
			size, err := m.NewBalance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPoolsToEthereum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValSetChange) > 0 {
		for iNdEx := len(m.ValSetChange) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValSetChange[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPoolsToEthereum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Nonce != 0 {
		i = encodeVarintPoolsToEthereum(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgBridgedUpdateConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgedUpdateConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgedUpdateConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EthereumAddress != nil {
		{
			size, err := m.EthereumAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPoolsToEthereum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPoolsToEthereum(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintPoolsToEthereum(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPoolsToEthereum(dAtA []byte, offset int, v uint64) int {
	offset -= sovPoolsToEthereum(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValSetChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovPoolsToEthereum(uint64(l))
	}
	if m.NewPower != 0 {
		n += 1 + sovPoolsToEthereum(uint64(m.NewPower))
	}
	return n
}

func (m *ETHBalanceChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalEth != 0 {
		n += 1 + sovPoolsToEthereum(uint64(m.TotalEth))
	}
	return n
}

func (m *Withdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovPoolsToEthereum(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovPoolsToEthereum(uint64(m.Amount))
	}
	if m.CoinAddress != nil {
		l = m.CoinAddress.Size()
		n += 1 + l + sovPoolsToEthereum(uint64(l))
	}
	return n
}

func (m *MsgBridgedUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovPoolsToEthereum(uint64(m.Nonce))
	}
	if len(m.ValSetChange) > 0 {
		for _, e := range m.ValSetChange {
			l = e.Size()
			n += 1 + l + sovPoolsToEthereum(uint64(l))
		}
	}
	if m.NewBalance != nil {
		l = m.NewBalance.Size()
		n += 1 + l + sovPoolsToEthereum(uint64(l))
	}
	if len(m.Withdrawals) > 0 {
		for _, e := range m.Withdrawals {
			l = e.Size()
			n += 1 + l + sovPoolsToEthereum(uint64(l))
		}
	}
	return n
}

func (m *MsgBridgedUpdateConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovPoolsToEthereum(uint64(m.Nonce))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPoolsToEthereum(uint64(l))
	}
	if m.EthereumAddress != nil {
		l = m.EthereumAddress.Size()
		n += 1 + l + sovPoolsToEthereum(uint64(l))
	}
	return n
}

func sovPoolsToEthereum(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPoolsToEthereum(x uint64) (n int) {
	return sovPoolsToEthereum(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValSetChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolsToEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValSetChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValSetChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolsToEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &github_com_ethereum_go_ethereum_common.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPower", wireType)
			}
			m.NewPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolsToEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPoolsToEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ETHBalanceChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolsToEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ETHBalanceChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ETHBalanceChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEth", wireType)
			}
			m.TotalEth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolsToEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalEth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPoolsToEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Withdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolsToEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Withdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Withdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolsToEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = append(m.To[:0], dAtA[iNdEx:postIndex]...)
			if m.To == nil {
				m.To = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolsToEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolsToEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoinAddress == nil {
				m.CoinAddress = &github_com_ethereum_go_ethereum_common.Address{}
			}
			if err := m.CoinAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolsToEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBridgedUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolsToEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgedUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgedUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolsToEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValSetChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolsToEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValSetChange = append(m.ValSetChange, &ValSetChange{})
			if err := m.ValSetChange[len(m.ValSetChange)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolsToEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewBalance == nil {
				m.NewBalance = &ETHBalanceChange{}
			}
			if err := m.NewBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolsToEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdrawals = append(m.Withdrawals, &Withdraw{})
			if err := m.Withdrawals[len(m.Withdrawals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolsToEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBridgedUpdateConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolsToEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgedUpdateConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgedUpdateConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolsToEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolsToEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolsToEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EthereumAddress == nil {
				m.EthereumAddress = &github_com_ethereum_go_ethereum_common.Address{}
			}
			if err := m.EthereumAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolsToEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPoolsToEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPoolsToEthereum(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPoolsToEthereum
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolsToEthereum
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolsToEthereum
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPoolsToEthereum
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPoolsToEthereum
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPoolsToEthereum
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPoolsToEthereum        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPoolsToEthereum          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPoolsToEthereum = fmt.Errorf("proto: unexpected end of group")
)
